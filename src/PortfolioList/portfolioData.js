

export const portfolio = [
  {
    title: "Jobly",
    id: "jobly",
    summary: "Jobly is a fullstack job-board web app featuring a ReactJS frontend, NodeJS REST API backend, and PostgreSQL database containing mock data. It is deployed on Heroku and Surge. I built Jobly over the course of two, weeklong sprints while attending Rithm School bootcamp in San Francisco.",
    frontend: [
      "React Frontend",
      "Client side routing with React-Router-Dom",
      "Route authentication and authorization using JSON web tokens",
      "An object oriented API helper class to interface with the backend",
      "Carefully planned component heirarchy and state management",
      "A user system with full login, signup, update, and role functionality",
      "Custom hook for storing and retrieving from local storage",
      "Currently in the process of converting the app to TypeScript"
    ],
    backend: [
      "Node-Express REST API backend",
      "Takes values from query string or from JSON body and returns JSON",
      "Middleware authenticates and authorizes each route using JWTs",
      "Extensively tested with Jest unit and integration tests",
      "Lightweight form validation using JSON Schema",
      "Object oriented models for Companies, Users, and Jobs",
      "Hashing with bcrypt ensures passwords are never stored in plain text",
      "Global 404 and generic error handler ensure predictable behavior"
    ],
    database: [
      "PostgreSQL Database",
      "Interfaced with db via PG, a lightweight Node-Postgres interface",
      "Database consists of tables for Company, User, and Job",
      "Developed Job as a through-table for many-to-many relationship between Company and User",
      "Wrote OOP methods to dynamically build SQL queries based on search parameters",
      "Implemented parameterized queries to prevent against SQL injection",
    ],
    img: "https://s3.us-west-1.amazonaws.com/pix.ly/jobly.png",
    link: "https://jobly-r25.surge.sh/",
  },
  {
    title: "Warbler",
    id: "warbler",
    summary: "Warbler is a fullstack Twitter clone built on Python-Flask. It is the result of a weeklong sprint to extend an existing, somewhat-functional app. During this project I worked to uncover bugs, write tests, and extending the app with new features.",
    frontend: [
      "Flask-Jinja Frontend",
      "Server-side-rendered pages using the JinjaII templating engine:",
      "Abstracted repeated code to templates for headers, footers, cards, and more",
      "Used Jinja syntax to implement dynamic behavior and logic inside templates",
      "Designed and implemented a “like” button with dynamic UI that sends an AJAX post request",
      "Utilized the library WTForms to build and validate forms for Messages and User SignUp/Login/Edit",
      "Used WTForms to protect against CSRF attacks and to validate form input",
    ],
    backend: [
      "Flask-Python Backend",
      "Implemented user authentication and authorization using the Flask Session object",
      "Followed a Test Driven Development methodology using Python's unittest library",
      "Developed methods to query database and provide metrics for likes, follows, followers",
      "Placed current user in Flask's global object to conveniently check user's admin/login status",
      "Utilized the python-debugger (pdb) to check for exisiting bugs, and troubleshoot the application",
      "Used the ORM SQLALchemy to define object oriented models that interface with the database",
    ],
    database: [
      "PostgreSQL Database with ORM",
      "Seeded a database using data from CSV files and a Python script",
      "Database consists of tables for Follows, Likes, Users, and Messages",
      "Implemented Follows through-table as many-to-many relationship between Users",
      "Implemented Likes through-table as many-to-many relationship between Users and Messages",
      "Stored passwords as bcrypt hashes. Referenced hash during login to avoid hold plain text passwords",
    ],
    img: "https://s3.us-west-1.amazonaws.com/pix.ly/warbler.png",
    link: "https://r-warble.herokuapp.com/",
  },
  {
    title: "This site",
    id: "personalSite",
    summary: "This site is v2 of my personal website. It's quite an upgrade, and easily the most complex frontend application I've developed to date. I plan to update the blog and project sections weekly so be sure to bookmark and check back!",
    frontend: [
      "React Frontend",
      "I wrote and continue to add to an OOP class responsible for converting Notion blocks to JSX",
      "Bootstrap 5.2 provides the styling and layout of the site",
      "React-Router-Dom keeps the URL relevant and handles navigation around the app",
      "I developed a simple metrics system encapsulated in the Metric component",
      "I implemented a custom local storage hook to stash and retrieve a JWT",
      "The Dashboard contains up-to-date metrics on visitor behavior, and pie chart drawn HTML canvas",
      "Due to having minimal content at launch, some search features of the blog are disabled. Expect to see more added over the next couple months",
      "I'm most proud of the Blog and Block system. Iterating on that API will allow me to write some stellar looking posts. No promises on to writing quality."
    ],
    backend: [
      "Node-Express Backend",
      "Integrated Notion SDK to publish blogs from my dekstop Notion app to this site",
      "Integrated Twitter API to embed my programming related tweets",
      "Developed my own system for measuring site metrics",
      "Wrote an OOP class to parse Notion Page Objects before uploading to db",
      "Implemented JWT endpoint to provide tokens for identifying unique visitors",
      "Future plans to integrate more 3rd party APIs",
    ],
    database: [
      "MongoDB Database",
      "The needs of the site are well suited to a non-relational db",
      "Mongo Atlas is both quick, easy, and free, and integrates nicely with my blog and metrics needs",
      "If I add users and comments to the blog then I'll implement a RDBMS at that time",
      "I currently relying on the front end for filtering blog posts, but that isn't scalable.",
      "As I add more content I will expand the backend to filter posts before sending to react ",
    ],
    img: "https://s3.us-west-1.amazonaws.com/pix.ly/site-shot.png"
  },
  {
    title: "Stretch Goals",
    id: "futureProjects",
    summary: "Just a few musings on future projects and technologies I'd like to work with. The Image is from the first application I ever deployed, Whittle.",
    frontend: ["",
      "I enjoy alternating between Vanilla JS and React. Translating projects from JS to JSX has been immensely educational, and quite a bit of fun too.",
      "In the future, I'd like to explore more sophisticated React concepts, and branch out to dabble in other frameworks as well.",
    ],
    backend: ["",
      "I'm excited to do more work in Node, specifically with web sockets. I plan on using Pith as something of a monolith for my personal projects.",
      "I'm also quite good with Flask, and there's so many amazing Python tools. I expect I'll put up some flask projects as I work through a book on data viz",
    ],
    database: ["",
      "So far my projects have stuck to one database per project, but I am interested in layering on the complexity.",
      "I'd like to experiment by using relational databases in conjunction with services like Mongo, Redis, or even GunJS.",
    ],
    img: "https://s3.us-west-1.amazonaws.com/pix.ly/whittle.png"
  }
];